// BEGIN GENERATED BY Observation.java.rb AT Fri Dec 02 14:17:56 -0800 2011
package org.inaturalist.android;
import java.sql.Timestamp;
import java.util.HashMap;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.net.Uri;
import android.provider.BaseColumns;

public class Observation implements BaseColumns {
	public Integer _id;
	public Timestamp created_at;
	public String description;
	public String geoprivacy;
	public String iconic_taxon_name;
	public Integer id;
	public Boolean id_please;
	public Double latitude;
	public Double longitude;
	public Timestamp observed_on;
	public String observed_on_string;
	public String place_guess;
	public Double positional_accuracy;
	public String species_guess;
	public Integer taxon_id;
	public Timestamp updated_at;
	public Integer user_id;
	public String user_login;


	public static UriMatcher URI_MATCHER;
	public static final String TABLE_NAME = "observations";
	public static final int OBSERVATIONS_URI_CODE = 1;
	public static final int OBSERVATION_ID_URI_CODE = 2;
	public static HashMap<String, String> PROJECTION_MAP;
	public static final String AUTHORITY = "org.inaturalist.android.observation";
	public static final Uri    CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/observations");
	public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.google.observation";
	public static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/vnd.google.observation";
	public static final String DEFAULT_SORT_ORDER = "created_at DESC";
	public static final String CREATED_AT = "created_at";
	public static final String DESCRIPTION = "description";
	public static final String GEOPRIVACY = "geoprivacy";
	public static final String ICONIC_TAXON_NAME = "iconic_taxon_name";
	public static final String ID = "id";
	public static final String ID_PLEASE = "id_please";
	public static final String LATITUDE = "latitude";
	public static final String LONGITUDE = "longitude";
	public static final String OBSERVED_ON = "observed_on";
	public static final String OBSERVED_ON_STRING = "observed_on_string";
	public static final String PLACE_GUESS = "place_guess";
	public static final String POSITIONAL_ACCURACY = "positional_accuracy";
	public static final String SPECIES_GUESS = "species_guess";
	public static final String TAXON_ID = "taxon_id";
	public static final String UPDATED_AT = "updated_at";
	public static final String USER_ID = "user_id";
	public static final String USER_LOGIN = "user_login";


	public static final String[] PROJECTION = new String[] {
		Observation._ID,
		Observation.CREATED_AT,
		Observation.DESCRIPTION,
		Observation.GEOPRIVACY,
		Observation.ICONIC_TAXON_NAME,
		Observation.ID,
		Observation.ID_PLEASE,
		Observation.LATITUDE,
		Observation.LONGITUDE,
		Observation.OBSERVED_ON,
		Observation.OBSERVED_ON_STRING,
		Observation.PLACE_GUESS,
		Observation.POSITIONAL_ACCURACY,
		Observation.SPECIES_GUESS,
		Observation.TAXON_ID,
		Observation.UPDATED_AT,
		Observation.USER_ID,
		Observation.USER_LOGIN
	};

	static {
		URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
		URI_MATCHER.addURI(AUTHORITY, "observations", OBSERVATIONS_URI_CODE);
		URI_MATCHER.addURI(AUTHORITY, "observations/#", OBSERVATION_ID_URI_CODE);

		PROJECTION_MAP = new HashMap<String, String>();
		PROJECTION_MAP.put(Observation._ID, Observation._ID);
		PROJECTION_MAP.put(Observation.CREATED_AT, Observation.CREATED_AT);
		PROJECTION_MAP.put(Observation.DESCRIPTION, Observation.DESCRIPTION);
		PROJECTION_MAP.put(Observation.GEOPRIVACY, Observation.GEOPRIVACY);
		PROJECTION_MAP.put(Observation.ICONIC_TAXON_NAME, Observation.ICONIC_TAXON_NAME);
		PROJECTION_MAP.put(Observation.ID, Observation.ID);
		PROJECTION_MAP.put(Observation.ID_PLEASE, Observation.ID_PLEASE);
		PROJECTION_MAP.put(Observation.LATITUDE, Observation.LATITUDE);
		PROJECTION_MAP.put(Observation.LONGITUDE, Observation.LONGITUDE);
		PROJECTION_MAP.put(Observation.OBSERVED_ON, Observation.OBSERVED_ON);
		PROJECTION_MAP.put(Observation.OBSERVED_ON_STRING, Observation.OBSERVED_ON_STRING);
		PROJECTION_MAP.put(Observation.PLACE_GUESS, Observation.PLACE_GUESS);
		PROJECTION_MAP.put(Observation.POSITIONAL_ACCURACY, Observation.POSITIONAL_ACCURACY);
		PROJECTION_MAP.put(Observation.SPECIES_GUESS, Observation.SPECIES_GUESS);
		PROJECTION_MAP.put(Observation.TAXON_ID, Observation.TAXON_ID);
		PROJECTION_MAP.put(Observation.UPDATED_AT, Observation.UPDATED_AT);
		PROJECTION_MAP.put(Observation.USER_ID, Observation.USER_ID);
		PROJECTION_MAP.put(Observation.USER_LOGIN, Observation.USER_LOGIN);

	}

	public Observation(Cursor c) {
		if (c.getPosition() == -1) {
			c.moveToFirst();
		}
		this._id = c.getInt(c.getColumnIndexOrThrow(_ID));
		this.created_at = new Timestamp(c.getLong(c.getColumnIndexOrThrow(CREATED_AT)));
		this.description = c.getString(c.getColumnIndexOrThrow(DESCRIPTION));
		this.geoprivacy = c.getString(c.getColumnIndexOrThrow(GEOPRIVACY));
		this.iconic_taxon_name = c.getString(c.getColumnIndexOrThrow(ICONIC_TAXON_NAME));
		this.id = c.getInt(c.getColumnIndexOrThrow(ID));
		this.id_please = (1 == c.getInt(c.getColumnIndexOrThrow(ID_PLEASE)));
		this.latitude = c.getDouble(c.getColumnIndexOrThrow(LATITUDE));
		this.longitude = c.getDouble(c.getColumnIndexOrThrow(LONGITUDE));
		this.observed_on = new Timestamp(c.getLong(c.getColumnIndexOrThrow(OBSERVED_ON)));
		this.observed_on_string = c.getString(c.getColumnIndexOrThrow(OBSERVED_ON_STRING));
		this.place_guess = c.getString(c.getColumnIndexOrThrow(PLACE_GUESS));
		this.positional_accuracy = c.getDouble(c.getColumnIndexOrThrow(POSITIONAL_ACCURACY));
		this.species_guess = c.getString(c.getColumnIndexOrThrow(SPECIES_GUESS));
		this.taxon_id = c.getInt(c.getColumnIndexOrThrow(TAXON_ID));
		this.updated_at = new Timestamp(c.getLong(c.getColumnIndexOrThrow(UPDATED_AT)));
		this.user_id = c.getInt(c.getColumnIndexOrThrow(USER_ID));
		this.user_login = c.getString(c.getColumnIndexOrThrow(USER_LOGIN));

	}

	public Observation(BetterJSONObject o) {
		this.created_at = o.getTimestamp("created_at");
		this.description = o.getString("description");
		this.geoprivacy = o.getString("geoprivacy");
		this.iconic_taxon_name = o.getString("iconic_taxon_name");
		this.id = o.getInt("id");
		this.id_please = o.getBoolean("id_please");
		this.latitude = o.getDouble("latitude");
		this.longitude = o.getDouble("longitude");
		this.observed_on = o.getTimestamp("observed_on");
		this.observed_on_string = o.getString("observed_on_string");
		this.place_guess = o.getString("place_guess");
		this.positional_accuracy = o.getDouble("positional_accuracy");
		this.species_guess = o.getString("species_guess");
		this.taxon_id = o.getInt("taxon_id");
		this.updated_at = o.getTimestamp("updated_at");
		this.user_id = o.getInt("user_id");
		this.user_login = o.getString("user_login");

	}

	public Uri getUri() {
		if (_id == null) {
			return null;
		} else {
			return ContentUris.withAppendedId(CONTENT_URI, _id);
		}
	}

	public void merge(Observation observation) {
		if (this.updated_at.before(observation.updated_at)) {
			// overwrite
			this.description = observation.description;
			this.geoprivacy = observation.geoprivacy;
			this.iconic_taxon_name = observation.iconic_taxon_name;
			this.id_please = observation.id_please;
			this.latitude = observation.latitude;
			this.longitude = observation.longitude;
			this.observed_on = observation.observed_on;
			this.observed_on_string = observation.observed_on_string;
			this.place_guess = observation.place_guess;
			this.positional_accuracy = observation.positional_accuracy;
			this.species_guess = observation.species_guess;
			this.taxon_id = observation.taxon_id;

		} else {
			// set if null
			if (this.description == null) { this.description = observation.description; }
			if (this.geoprivacy == null) { this.geoprivacy = observation.geoprivacy; }
			if (this.iconic_taxon_name == null) { this.iconic_taxon_name = observation.iconic_taxon_name; }
			if (this.id_please == null) { this.id_please = observation.id_please; }
			if (this.latitude == null) { this.latitude = observation.latitude; }
			if (this.longitude == null) { this.longitude = observation.longitude; }
			if (this.observed_on == null) { this.observed_on = observation.observed_on; }
			if (this.observed_on_string == null) { this.observed_on_string = observation.observed_on_string; }
			if (this.place_guess == null) { this.place_guess = observation.place_guess; }
			if (this.positional_accuracy == null) { this.positional_accuracy = observation.positional_accuracy; }
			if (this.species_guess == null) { this.species_guess = observation.species_guess; }
			if (this.taxon_id == null) { this.taxon_id = observation.taxon_id; }

		}
	}

	public ContentValues getContentValues() {
		ContentValues cv = new ContentValues();
		if (created_at != null) { cv.put(CREATED_AT, created_at.getTime()); }
		cv.put(DESCRIPTION, description);
		cv.put(GEOPRIVACY, geoprivacy);
		cv.put(ICONIC_TAXON_NAME, iconic_taxon_name);
		cv.put(ID, id);
		cv.put(ID_PLEASE, id_please);
		cv.put(LATITUDE, latitude);
		cv.put(LONGITUDE, longitude);
		if (observed_on != null) { cv.put(OBSERVED_ON, observed_on.getTime()); }
		cv.put(OBSERVED_ON_STRING, observed_on_string);
		cv.put(PLACE_GUESS, place_guess);
		cv.put(POSITIONAL_ACCURACY, positional_accuracy);
		cv.put(SPECIES_GUESS, species_guess);
		cv.put(TAXON_ID, taxon_id);
		if (updated_at != null) { cv.put(UPDATED_AT, updated_at.getTime()); }
		cv.put(USER_ID, user_id);
		cv.put(USER_LOGIN, user_login);

		return cv;
	}

	public static String sqlCreate() {
		return "CREATE TABLE " + TABLE_NAME + " ("
				+ Observation._ID + " INTEGER PRIMARY KEY,"
				+ "created_at INTEGER,"
				+ "description TEXT,"
				+ "geoprivacy TEXT,"
				+ "iconic_taxon_name TEXT,"
				+ "id INTEGER,"
				+ "id_please INTEGER,"
				+ "latitude BLOB,"
				+ "longitude BLOB,"
				+ "observed_on INTEGER,"
				+ "observed_on_string TEXT,"
				+ "place_guess TEXT,"
				+ "positional_accuracy BLOB,"
				+ "species_guess TEXT,"
				+ "taxon_id INTEGER,"
				+ "updated_at INTEGER,"
				+ "user_id INTEGER,"
				+ "user_login TEXT"
				+ ");";
	}
}
// END GENERATED BY Observation.java.rb AT Fri Dec 02 14:17:56 -0800 2011
