def sql_type(type)
  case type
  when "int", "Timestamp", "Boolean" then "INTEGER"
  when "String" then "TEXT"
  else "BLOB"
  end
end


vars = {
  'id' => 'int',
  'taxon_id' => 'int',
  'iconic_taxon_name' => 'String',
  'user_id' => 'int',
  'user_login' => 'String',
  'observed_on' => 'Timestamp',
  'time_observed_at' => 'Timestamp',
  'observed_on_string' => 'String',
  'species_guess' => 'String',
  'place_guess' => 'String',
  'description' => 'String',
  'latitude' => 'Double',
  'longitude' => 'Double',
  'positional_accuracy' => 'Float',
  'geoprivacy' => 'String',
  'id_please' => 'Boolean',
  'created_at' => 'Timestamp',
  'updated_at' => 'Timestamp',
  '_created_at' => 'Timestamp',
  '_updated_at' => 'Timestamp',
  '_synced_at' => 'Timestamp'
}.to_a.sort

non_merge_var_names = %w(_id user_id user_login _synced_at)
merge_vars = vars.reject {|name,type| non_merge_var_names.include?(name)}

non_param_var_names = %w(id user_id user_login created_at updated_at _created_at _updated_at _id _synced_at)
param_vars = vars.reject {|name,type| non_param_var_names.include?(name)}

now = Time.now
puts <<-JAVA
// BEGIN GENERATED BY #{__FILE__} AT #{now}
package org.inaturalist.android;
import java.io.Serializable;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.net.Uri;
import android.provider.BaseColumns;

public class Observation implements BaseColumns, Serializable {
  public Integer _id;
  #{vars.map{|name, type| "public #{type == 'int' ? 'Integer' : type} #{name};\n"}}
  
  private static final long serialVersionUID = 3867583269732803822L;
  public static UriMatcher URI_MATCHER;
  public static final String TABLE_NAME = "observations";
  public static final int OBSERVATIONS_URI_CODE = 1;
  public static final int OBSERVATION_ID_URI_CODE = 2;
  public static HashMap<String, String> PROJECTION_MAP;
  public static final String AUTHORITY = "org.inaturalist.android.observation";
  public static final Uri    CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/observations");
  public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.google.observation";
  public static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/vnd.google.observation";
  public static final String DEFAULT_SORT_ORDER = "observed_on DESC, _id DESC";
  #{vars.map{|name, type| "public static final String #{name.upcase} = \"#{name}\";\n"}}
  
  public static final String[] PROJECTION = new String[] {
    Observation._ID,
    #{vars.map{|name, type| "Observation.#{name.upcase}"}.join(",\n")}
  };

  static {
      URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
      URI_MATCHER.addURI(AUTHORITY, "observations", OBSERVATIONS_URI_CODE);
      URI_MATCHER.addURI(AUTHORITY, "observations/#", OBSERVATION_ID_URI_CODE);

      PROJECTION_MAP = new HashMap<String, String>();
      PROJECTION_MAP.put(Observation._ID, Observation._ID);
      #{vars.map{|name, type| "PROJECTION_MAP.put(Observation.#{name.upcase}, Observation.#{name.upcase});\n"}}
  }
  
  public Observation(Cursor c) {
    if (c.getPosition() == -1) {
      c.moveToFirst();
    }
    BetterCursor bc = new BetterCursor(c);
    this._id = bc.getInt(_ID);
    #{vars.map {|name, type|
      "this.#{name} = bc.get#{type.capitalize}(#{name.upcase});\n"
    }}
  }
  
  public Observation(BetterJSONObject o) {
    #{vars.map {|name, type|
      "this.#{name} = o.get#{type.capitalize}(\"#{name}\");\n"
    }}
  }
  
  @Override
  public String toString() {
    return "Observation(id: " + id + ", _id: " + _id + ")";
  }
  
  public JSONObject toJSONObject() {
    BetterJSONObject bo = new BetterJSONObject();
    #{vars.map {|name, type|
      "bo.put(\"#{name}\", #{name});\n"
    }}
    return bo.getJSONObject();
  }
  
  public Uri getUri() {
    if (_id == null) {
      return null;
    } else {
      return ContentUris.withAppendedId(CONTENT_URI, _id);
    }
  }
  
  public void merge(Observation observation) {
    if (this._updated_at.before(observation.updated_at)) {
      // overwrite
      #{merge_vars.map {|name, type|
        "this.#{name} = observation.#{name};\n"
      }}
    } else {
      // set if null
      #{merge_vars.map {|name, type|
        "if (this.#{name} == null) { this.#{name} = observation.#{name}; }\n"
      }}
    }
  }
  
  public ContentValues getContentValues() {
    ContentValues cv = new ContentValues();
    #{vars.map{|name, type|
      if type == "Timestamp"
        "if (#{name} != null) { cv.put(#{name.upcase}, #{name}.getTime()); }\n"
      else
        "cv.put(#{name.upcase}, #{name});\n"
      end
    }}
    return cv;
  }
  
  public ArrayList<NameValuePair> getParams() {
    final ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();
    #{param_vars.map{|name, type| 
      "if (#{name} != null) { params.add(new BasicNameValuePair(\"observation[#{name}]\", #{name}.toString())); }\n"
    }}
    return params;
  }
  
  public static String sqlCreate() {
    return "CREATE TABLE " + TABLE_NAME + " ("
        + Observation._ID + " INTEGER PRIMARY KEY,"
        + "#{vars.map{|name, type|
          "#{name} #{sql_type(type)}"
        }.join(",\"\n+ \"")}"
        + ");";
  }
}
// END GENERATED BY #{__FILE__} AT #{now}
JAVA

